% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create-config.R
\name{configure_simulation}
\alias{configure_simulation}
\title{Create a configuration object used to run simulations}
\usage{
configure_simulation(
  x,
  models,
  iters,
  params,
  method_sample,
  method_model,
  method_results,
  method_pre_model = NULL,
  method_post_model = NULL,
  globals = NULL,
  verbose = TRUE
)
}
\arguments{
\item{x}{data.frame to use for model simulation}

\item{models}{list of lists for each model that should be run each iteration.
The elements must be lists containing `model_call`, `model_formula`, and
optionally `model_args`.}

\item{iters}{number of iterations for each simulation}

\item{method_sample}{function for sampling treated units, should modify the
single_simulation$data object}

\item{method_model}{function to run model, default performs a do.call on the 
model_call, passing model_formula and model_args if provided. Resulting 
model object is added to single_simulation list under named element
"model_result"}

\item{method_results}{function that takes the single_simulation object and
the return value is what it returned from run_iteration}

\item{method_pre_model}{optional function that will be applied single_simulation
object prior to modeling}

\item{method_post_model}{optional function for any post-processing on 
single_simulation object}

\item{verbose}{should I be chatty? Default is yes, I am chatty.}
}
\description{
Performs validation on inputs and produces a configuration object
    that contains all required parameters to dispatch simulation runs for data
    provided.
}
\details{
The resulting configuration object is passed to run iteration when
    dispatching simulations. The run_iteration method will first create a
    single_simulation object from self$setup_single_simulation(i), where i is
    the ith simulation that was configured. Then run_iteration will pass the
    single_simulation object to each of the method functions. The method
    functions should modify elements of the single_simulation list and return
    the entire single_simulation object. The method functions are run in the
    following order (any that are set to NULL will be skipped): method_sample,
    method_pre_model, method_model, method_post_model, method_result.
}
