[{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to OPTIC","text":"vignette covers use Opioid Policy Tools Information Center (OPTIC) simulation package, contains tools simulate treatment effects panel data repeated measures data examine performance commonly-used statistical models. Briefly, OPTIC uses Monte Carlo simulations estimate performance models typically used state-level policy evaluation (example, differences--differences estimators). Package users provide simulation procedure policy evaluation scenario, hypothetical treatment effect, estimation approach, simulation parameters. OPTIC package constructs simulations chosen simulation parameters estimators, returning summary statistics simulation’s performance. Currently, OPTIC developed policy evaluation scenarios following assumptions: confounding : confounding variables determine observations’s selection treatment. Treatment effects assumed constant rather time-varying. Concurrent policies: one additional policy co-occurs policy -interest. Confounding: confounding variable associated policy adoption outcome trends. Additional details simulation procedures within OPTIC package available Griffin et al., 2021 (Griffin et al. 2021) Griffin et al., 2022 (Griffin et al. 2023). Forthcoming updates OPTIC provides simulations test effect confounding bias model performance. README covers use OPTIC R provides examples package’s features. Section one covers package installation, section two provides general overview package’s usage, section three provides two examples package different policy scenarios described .","code":""},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to OPTIC","text":"R session, install package CRAN : github:","code":"install.packages(\"optic\") # Install remotes if necessary # install.packages(\"remotes\") remotes::install_github(\"RANDCorporation/optic\")"},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"overview-of-the-optic-package","dir":"Articles","previous_headings":"","what":"Overview of the OPTIC Package","title":"Introduction to OPTIC","text":"OPTIC contains two core functions performing simulations, require four user-provided inputs. Figure 1 displays flowchart OPTIC’s required steps produce simulation results. following sections describe OPTIC inputs steps detail.","code":""},{"path":[]},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"data","dir":"Articles","previous_headings":"Overview of the OPTIC Package > User inputs","what":"Data","title":"Introduction to OPTIC","text":"Analysts need shape data work properly OPTIC. package contains example dataset demonstrates format required function optic_simulation. data generally structured work input two-way fixed effect model, using “long-format”, variables “group”, “time”, covariates, outcome variable. example data included package derived data provided US Bureau Labor Statistics Centers Disease Control Prevention.","code":""},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"policy-evaluation-scenarios","dir":"Articles","previous_headings":"Overview of the OPTIC Package > User inputs","what":"Policy evaluation scenarios","title":"Introduction to OPTIC","text":"Policy evaluation scenarios single string inputs optic_simulation function, representing either confounding scenario (“noconf”) co-occurring policies scenario (“concurrent”). “concurrent” scenario, additional parameters required optic_simulation, discussed “parameter” section . Additional details policy evaluation scenarios provided Griffin et al., 2021(Griffin et al. 2021) Griffin et al., 2022(Griffin et al. 2023).","code":""},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"treatment-scenarios","dir":"Articles","previous_headings":"Overview of the OPTIC Package > User inputs","what":"Treatment scenarios","title":"Introduction to OPTIC","text":"input represents “true treatment effects” OPTIC simulate across iteration simulations. OPTIC currently designed work generating static treatment effects (rather dynamic treatment effects, time-varying treatment effects). Users structure treatment scenarios list, corresponding different types treatment effects like see examined. user simulating models ‘concurrent’ policy evaluation scenario, list contain two effects within vector potential treatment scenario user wants examine. Using example_data:","code":"data(overdoses)  # Calculate 5% and 10% changes in mean opioid_death_rate, across states and years.  five_percent_effect <- 0.05*mean(overdoses$crude.rate, na.rm = T) ten_percent_effect  <- 0.10*mean(overdoses$crude.rate, na.rm = T)  # Calculate a co-occuring policy effect cooccur_effect <- -0.02*mean(overdoses$crude.rate, na.rm = T)  # Scenario object for \"no confounding\" evaluation scenario: scenarios_no_confounding <- list(five_percent_effect, ten_percent_effect)  # Scenario object for \"co-occuring policy\" evaluation scenario: scenarios_co_occur <- list(c(five_percent_effect, cooccur_effect),                            c(ten_percent_effect, cooccur_effect))"},{"path":[]},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"optic_model-and-optic_simulation","dir":"Articles","previous_headings":"Overview of the OPTIC Package > OPTIC functions","what":"optic_model and optic_simulation","title":"Introduction to OPTIC","text":"treatment scenario, OPTIC simulate specified treatment effect onto users repeated measures data attempt estimate effect based user-provided models. optic_simulation function takes list optic_model. Model lists contain optic_model following arguments : name: name model identify model type results. type: Users can set either “autoreg”, “drdid”, “multisynth”, “reg”. “reg” uses typical regression framework, implementing procedure chosen model_call. “autoreg” adds dependent lag model formula. “drdid” estimates treatment effect using doubly-robust difference--difference estimator, covariates model_formula argument used within propensity score stage outcome modeling stage (details doubly robust difference--differences, see Sant’Anna \\& Zhao, 2020) “multisynth” estimates treatment effect using augmented synthetic controls (additional details augmented synthetic controls, see Ben-Michael, Feller, \\& Rothstein, 2021). call: call model R (e.g. “lm”, “glm”, etc). formula: model specification, R formula. Needs include variable labeled “treament_level” treatment status labeled “treatment_change” coding change treatment status (using autoregressive models). “concurrent” scenarios, treatment variables labeled “treatment1” “treatment2” policy included. args: additional arguments passed model_call (e.g. “weights”, “family”, “control” etc.). se_adjust: adjustments standard errors estimation. OPTIC recognizes either “none” adjustment “cluster” clustered standard errors (OPTIC use optic_simulation parameter “unit_var” determine clusters clustered standard errors). provides example model list using example_data:","code":"# Specify 3 models to simulate treatment effects: Linear fixed effect model, # with and without covariate adjusters, and a linear model using ar-terms # and no fixed-effects  lm_fe_unadj <- optic_model(     name = \"fixed_effect_linear\",     type = \"reg\",     call = \"lm\",     formula = crude.rate ~ as.factor(year) + as.factor(state) + treatment_level,     se_adjust = \"cluster-unit\" )  lm_fe_adj <- optic_model(     name = \"fixed_effect_linear_adj\",     type = \"reg\",     call = \"lm\",     formula = crude.rate ~ unemploymentrate + as.factor(year) + as.factor(state) + treatment_level,     se_adjust = \"cluster-unit\" )    lm_ar <- optic_model(     name = \"auto_regressive_linear\",     type = \"autoreg\",     call = \"lm\",     formula = crude.rate ~ unemploymentrate + as.factor(year) + treatment_change,     se_adjust = \"none\" )  sim_models <- list(lm_fe_unadj, lm_fe_adj, lm_ar)"},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"optic_simulation","dir":"Articles","previous_headings":"Overview of the OPTIC Package > OPTIC functions","what":"optic_simulation","title":"Introduction to OPTIC","text":"function takes policy evaluation scenario, treatment scenarios, model list, function parameters generate synthetic datasets simulated treatment effects. optic_simulation following arguments: x: prepped analysis dataset. See section details. models: List models. See section details. method: Policy evaluation scenario. Can either “noconf” “concurrent”. unit_var: Variable groups within dataset. Used determine clusters clustered standard errors time_var: variable used time units. Variable correspond years. use alternative time units, express fractional years (e.g. July = 7/12). effect_magnitude: vector treatment scenarios. See section details. Synthetic datasets generated entry vector. n_units: vector number units treatment group. Synthetic datasets generated entry vector. effect_direction: vector containing either ‘neg’, ‘null’, ‘pos’. Synthetic datasets generated entry vector. Determines direction simulated effect. policy_speed: vector containing either ‘instant’ ‘slow’ entries, determining quickly treated units obtain simulated effect. Synthetic datasets generated entry vector. Can either ‘instant” (treatment effect applies fully first treated time period) ’slow’ (treatment effect ramps linearly desired effect size, based n_implementation_periods. n_implementation_periods numeric vector number periods implementation treated units reach desired simulated treatment effect. Synthetic datasets generated entry vector. Three additional arguments optic_simulation apply within “concurrent” policy scenario: rhos: vector 0-1 values indicating correlation primary policy cooccuring policy. Synthetic datasets generated entry vector. years_apart: Number years primary policy implemented cooccuring policy. ordered: Determines primary policy always occurs confounding policy (TRUE) policies randomly ordered (FALSE). four arguments apply “confounding” policy scenario: conf_var: string variable, defining (unobserved) confounding variable dataset used simulate effect confounding outcome variable. prior_control: string variable either “level” “trend”. Specifies confounding \\(C_ij\\) term, confounding due either prior outcome levels prior outcome trends. trends, OPTIC simulates confounding average outcome levels previous three years. bias_type: String determining type confounding effect, either ‘linear’ ‘nonlinear’. linear chosen, confounding outcome simulated additive (unobserved confound variable + prior outcome trend/level). non-linear, confounding simulated additive, along squared confounding terms interaction term two confounders (unobserved variable prior outcome level/trends). bias_size: string either ‘small’, ‘medium’, ‘large’. Used determine level confounding (see paper details; parameter sets values \\(a_i\\) \\(b_i\\) terms). terms determined standardized mean difference simulated outcomes treated units policy-enacted years simulated outcomes non-treated units/treated units non-policy enacted years 0.15, 0.30, 0.45 (‘small’, ‘medium’, ‘large’, respectively). function returns configuration object ’s used input dispatch_simulations. object contains dataset listing possible simulations run model. example call optic_simulation displayed : addition parameters discussed , OPTIC also permits advanced user override internal functions model (sampling method assigning treatment), passing custom function optic_simulation. suggest referring underlying functions within scripts -confounding-methods.R, concurrent-methods.R, selection-bias-methods.R, modifications desired.","code":"sim_config <- optic_simulation(      x                        = overdoses,   models                   = sim_models,   iters                    = 100,   method                   = \"no_confounding\",   unit_var                 = \"state\",   treat_var                = \"state\",   time_var                 = \"year\",   effect_magnitude         = scenarios_no_confounding,   n_units                  = c(30, 40, 50),   effect_direction         = c(\"neg\"),   policy_speed             = c(\"instant\"),   n_implementation_periods = c(1)  ) #> Number of Simulations: 6 #> Number of Models: 3 #> Iteration per Simulation : 100 #> Total number of Iterations to Run: 1800"},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"dispatch_simulations","dir":"Articles","previous_headings":"Overview of the OPTIC Package > OPTIC functions","what":"dispatch_simulations","title":"Introduction to OPTIC","text":"configuration object built, can now simulate models configuration scenarios using simulate function. function accepts arguments parallelize code use “future” package. setting turned , function try parallelize simulation iterations analyst’s machine. additional packages required user model calls (e.g. specific modeling package) must also passed dispatch_simulations using future.globals future.packages arguments. Note next step take minutes run; large numbers permutations iterations, can require several hours function finish. suggest using parallelization options (use_future = T), can help great deal large analyses data interest. recommend using anywhere 300-1000 iterations analyzing final sets output. OPTIC provide short summary models run verbose set 1 2. now results can used construct summary statistics compare models policy evaluation. scenario saved list entry results object, list entry containing dataframe rows model results. Model results return model point estimates & standard errors treatment variable (‘noconf’ method, variable ‘treatment’ ’concurrent” method, variable treatment1 & treatment2), along policy scenario settings. results table includes simulation run parameters, along estimates simulated treatment effect. table displays select estimates large results table: also detailed information Type error rates estimated treatment effect null, Type S error rates, coverage. can use results table analyze relative performance models across data scenarios create test statistics needed analysis. example, might interested comparingrelative bias across point estimates, scenario effect policy implementation immediate decreases crude.rate 5%: output, can see models producing similar estimates, across simulated point estimate draws. models biased slightly downwards compared true effect, autoregressive linear model seems outperform unadjusted adjusted fixed effect model, producing estimate closer truth, improved precision. Based simulation, models consideration, results justify using autoregressive linear model analyzing real policy effect.","code":"results <- dispatch_simulations(      sim_config,   use_future = T,   seed = 9782,   verbose = 2,   future.globals=c(\"cluster_adjust_se\"),   future.packages=c(\"MASS\", \"dplyr\", \"optic\")    ) #> JOB 1 OF 6 DISPATCHED: #>         DISPATCH METHOD: parallel (future) #>         PARAMS: #>             unit_var: state #>             time_var: year #>             effect_magnitude: 0.632536458333333 #>             n_units: 30 #>             effect_direction: neg #>             policy_speed: instant #>             n_implementation_periods: 1 #>             prior_control: level #>             treat_var: state #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:MASS': #>  #>     select #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> JOB 2 OF 6 DISPATCHED: #>         DISPATCH METHOD: parallel (future) #>         PARAMS: #>             unit_var: state #>             time_var: year #>             effect_magnitude: 1.26507291666667 #>             n_units: 30 #>             effect_direction: neg #>             policy_speed: instant #>             n_implementation_periods: 1 #>             prior_control: level #>             treat_var: state #> JOB 3 OF 6 DISPATCHED: #>         DISPATCH METHOD: parallel (future) #>         PARAMS: #>             unit_var: state #>             time_var: year #>             effect_magnitude: 0.632536458333333 #>             n_units: 40 #>             effect_direction: neg #>             policy_speed: instant #>             n_implementation_periods: 1 #>             prior_control: level #>             treat_var: state #> JOB 4 OF 6 DISPATCHED: #>         DISPATCH METHOD: parallel (future) #>         PARAMS: #>             unit_var: state #>             time_var: year #>             effect_magnitude: 1.26507291666667 #>             n_units: 40 #>             effect_direction: neg #>             policy_speed: instant #>             n_implementation_periods: 1 #>             prior_control: level #>             treat_var: state #> JOB 5 OF 6 DISPATCHED: #>         DISPATCH METHOD: parallel (future) #>         PARAMS: #>             unit_var: state #>             time_var: year #>             effect_magnitude: 0.632536458333333 #>             n_units: 50 #>             effect_direction: neg #>             policy_speed: instant #>             n_implementation_periods: 1 #>             prior_control: level #>             treat_var: state #> JOB 6 OF 6 DISPATCHED: #>         DISPATCH METHOD: parallel (future) #>         PARAMS: #>             unit_var: state #>             time_var: year #>             effect_magnitude: 1.26507291666667 #>             n_units: 50 #>             effect_direction: neg #>             policy_speed: instant #>             n_implementation_periods: 1 #>             prior_control: level #>             treat_var: state knitr::kable(results[[1]][c(2, 4, 6), 1:9], format = \"markdown\") # Compare point estimates across models for the 5% change scenario, with instantaneous policy adoption: df_compare <- results[[1]][(results[[1]]$se_adjustment == \"cluster-unit\")|(results[[1]]$model_name == \"auto_regressive_linear\"),]  true_est <- -round(five_percent_effect, 3)  grab_mean_and_se <- function(model_name){      sim_mean <- round(mean(df_compare[df_compare$model_name == model_name,]$estimate), 3)   sim_se   <- round(sd(df_compare[df_compare$model_name == model_name,]$estimate), 3)      res <- paste0(sim_mean, \" (\", sim_se, \")\")   return(res)    }  print(paste0(\"True effect size: \", true_est)) #> [1] \"True effect size: -0.633\" print(paste0(\"FE LM effect: \", grab_mean_and_se('fixed_effect_linear'))) #> [1] \"FE LM effect: -0.683 (0.976)\" print(paste0(\"FE LM adjusted effect: \", grab_mean_and_se('fixed_effect_linear_adj'))) #> [1] \"FE LM adjusted effect: -0.685 (0.975)\" print(paste0(\"AR LM effect: \", grab_mean_and_se('auto_regressive_linear'))) #> [1] \"AR LM effect: -0.64 (0.428)\""},{"path":"https://randcorporation.github.io/optic/articles/intro_optic.html","id":"acknowledgements","dir":"Articles","previous_headings":"Overview of the OPTIC Package > OPTIC functions","what":"Acknowledgements","title":"Introduction to OPTIC","text":"package financially supported National Institutes Health (NIH) grant (P50DA046351) RAND (PI: Stein).","code":""},{"path":[]},{"path":"https://randcorporation.github.io/optic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Beth Ann Griffin. Author, copyright holder. Pedro Nascimento de Lima. Maintainer, author. Max Griswold. Author. Adam Scherling. Author. Joseph Pane. Author. Geoffrey Grimm. Author.","code":""},{"path":"https://randcorporation.github.io/optic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Griffin B, Nascimento de Lima P, Griswold M, Scherling , Pane J, Grimm G (2023). optic: Simulation Tool Causal Inference Using Longitudinal Data. https://randcorporation.github.io/optic/, https://github.com/randcorporation/optic.","code":"@Manual{,   title = {optic: Simulation Tool for Causal Inference Using Longitudinal Data},   author = {Beth Ann Griffin and Pedro {Nascimento de Lima} and Max Griswold and Adam Scherling and Joseph Pane and Geoffrey Grimm},   year = {2023},   note = {https://randcorporation.github.io/optic/, https://github.com/randcorporation/optic}, }"},{"path":"https://randcorporation.github.io/optic/index.html","id":"optic-","dir":"","previous_headings":"","what":"Simulation Tool for Causal Inference Using Longitudinal Data","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"Simulation Tool Causal Inference Using Longitudinal Data  optic R package helps scrutinize candidate causal inference models using longitudinal data. Researchers Opioid Policy Tools Information Center (OPTIC) initially created tool examine longitudinal data related opioids, framework can used longitudinal data topics opioids.","code":""},{"path":"https://randcorporation.github.io/optic/index.html","id":"background-and-rationale","dir":"","previous_headings":"","what":"Background and Rationale","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"Recent difference--differences () literature revealed issues traditional model, found difficult evaluate relative performance different causal inference methods using data. Thus, designed series simulations (Griffin et al. 2021; Griffin et al. 2023) study performance various methods different scenarios. publications date follows: Griffin et al. (2021), use real-world data opioid mortality rates assess commonly used statistical models designs, widely used state policy evaluations. experiments demonstrated notable limitations methods. contrast, optimal model identified—autoregressive (AR) model—showed lot promise. said, just take word ; try data see various approaches perform relative another. See “Usage” section details. Griffin et al. (2023), demonstrate critical able control effects co-occurring policies understand potential bias might arise controlling policies. package can help assess impact co-occurring policies performance commonly used statistical models state policy evaluations. Assessing methods systematic way might challenging, can now use optic R package simulate policy effects compare causal inference models using data. package supports traditional two-way fixed effects model AR model, well leading methods, augmented synthetic control Callaway-Sant’Anna approach (Ben-Michael, Feller, Rothstein 2021; Callaway Sant’Anna 2021).","code":""},{"path":"https://randcorporation.github.io/optic/index.html","id":"why-optic","dir":"","previous_headings":"Background and Rationale","what":"Why optic?","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"optic named Opioid Policy Tools Information Center (OPTIC) project.","code":""},{"path":"https://randcorporation.github.io/optic/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"need R (version 4.1.0 ) use package. can install optic R package R console:","code":"# install from CRAN: install.packages(\"optic\")  # or install the development version from github: # install remotes if needed install.packages(\"remotes\") remotes::install_github(\"RANDCorporation/optic\")"},{"path":"https://randcorporation.github.io/optic/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"introductory vignette provides working example using sample overdoses dataset provided package. optic provides three main functions: optic_model, optic_simulation, dispatch_simulations. Use optic_model define model specifications causal model tested simulation experiment. , pass models, data, parameters optic_simulation function, specifies set simulations performed optic_model included list models. Finally, use dispatch_simulations run simulations parallel.","code":""},{"path":"https://randcorporation.github.io/optic/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"Reach Beth Ann Griffin questions related repository.","code":""},{"path":"https://randcorporation.github.io/optic/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"Copyright (C) 2023 RAND Corporation. repository released open-source software GPL-3.0 license. See LICENSE file.","code":""},{"path":"https://randcorporation.github.io/optic/index.html","id":"about-this-tool","dir":"","previous_headings":"","what":"About this Tool","title":"Simulation Tool for Causal Inference Using Longitudinal Data","text":"research financially supported National Institute Drug Abuse grant (P50DA046351) RAND Corporation carried within Access Delivery Program RAND Health Care. RAND Health Care, division RAND Corporation, promotes healthier societies improving health care systems United States countries. providing health care decisionmakers, practitioners, consumers actionable, rigorous, objective evidence support complex decisions. information, see www.rand.org/health-care, contact RAND Health Care Communications 1776 Main Street P.O. Box 2138 Santa Monica, CA 90407-2138 (310) 393-0411, ext. 7775RAND_Health-Care@rand.org","code":""},{"path":[]},{"path":"https://randcorporation.github.io/optic/reference/calculate_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the exposure rate applied to each year provided month\nof policy implementation and number of years to full implementation — calculate_exposure","title":"Calculates the exposure rate applied to each year provided month\nof policy implementation and number of years to full implementation — calculate_exposure","text":"Calculates exposure rate applied year provided month policy implementation number years full implementation","code":""},{"path":"https://randcorporation.github.io/optic/reference/calculate_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the exposure rate applied to each year provided month\nof policy implementation and number of years to full implementation — calculate_exposure","text":"","code":"calculate_exposure(month, n_years, monthly_effect = (1/n_years)/12)"},{"path":"https://randcorporation.github.io/optic/reference/calculate_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the exposure rate applied to each year provided month\nof policy implementation and number of years to full implementation — calculate_exposure","text":"month month year (integer) policy takes effect n_years number months full implementation effect monthly_effect increment exposure apply month; default ((1/n_years) / 12) (constant period)","code":""},{"path":"https://randcorporation.github.io/optic/reference/calculate_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the exposure rate applied to each year provided month\nof policy implementation and number of years to full implementation — calculate_exposure","text":"vector percentages, indicating change exposure year (relative start month)","code":""},{"path":"https://randcorporation.github.io/optic/reference/calculate_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the exposure rate applied to each year provided month\nof policy implementation and number of years to full implementation — calculate_exposure","text":"","code":"# Calculate uniform increase in policy effect which ramps up across 10 years  # Assume policy starts in July of the first year, then continues for 10 years starting_month <- 7 implementation_years <- 10  # Assume some policy effect (which is the target effect for simulations) policy_effect <- 2  exposure_by_year <- calculate_exposure(starting_month, implementation_years)  # Based on exposure by year, calculate policy effect by year: plot(policy_effect*exposure_by_year)"},{"path":"https://randcorporation.github.io/optic/reference/dispatch_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute simulations defined in a optic_simulation object — dispatch_simulations","title":"Execute simulations defined in a optic_simulation object — dispatch_simulations","text":"Execute simulations defined optic_simulation object","code":""},{"path":"https://randcorporation.github.io/optic/reference/dispatch_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute simulations defined in a optic_simulation object — dispatch_simulations","text":"","code":"dispatch_simulations(object, seed = NULL, use_future = FALSE, verbose = 0, ...)"},{"path":"https://randcorporation.github.io/optic/reference/dispatch_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute simulations defined in a optic_simulation object — dispatch_simulations","text":"object Simulation scenarios object created using optic_simulation seed Specified either NULL numeric. Sets seed, becomes index results, independent set simulations optic_simulation. use_future Runs simulation scenarios parallel. Default FALSE, set TRUE already setup future plan (e.g., multiprocess, cluster, etc) like iterations run parallel. verbose Default TRUE. TRUE, provides details currently running. ... additional parameters passed future_apply. User can pass future.globals future.packages code relies additional packages","code":""},{"path":"https://randcorporation.github.io/optic/reference/dispatch_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute simulations defined in a optic_simulation object — dispatch_simulations","text":"list dataframes, list entry contains results set simulation parameters, dataframes containing estimated treatment effects summary statistics model  draw.","code":""},{"path":"https://randcorporation.github.io/optic/reference/dispatch_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute simulations defined in a optic_simulation object — dispatch_simulations","text":"","code":"# Set up a basic model and simulation scenario: data(overdoses)  eff <- 0.1*mean(overdoses$crude.rate, na.rm = TRUE) form <- formula(crude.rate ~ state + year + population + treatment_level) mod <- optic_model(name = 'lin',                     type = 'reg',                     call = 'lm',                     formula = form,                     se_adjust = 'none')  sim <- optic_simulation(x = overdoses,                          models = list(mod),                          method = 'no_confounding',                          unit_var = 'state',                          treat_var = 'state',                         time_var = 'year',                          effect_magnitude = list(eff),                          n_units = 2,                          effect_direction = 'pos',                          iters = 2,                         policy_speed = 'instant',                          n_implementation_periods = 1) #> Number of Simulations: 1 #> Number of Models: 1 #> Iteration per Simulation : 2 #> Total number of Iterations to Run: 2  # Finally, dispatch the simulation: dispatch_simulations(sim) #> [[1]] #>      outcome se_adjustment estimate       se variance   t_stat      p_value #> 1 crude.rate          none 4.887467 1.299898 1.689736 3.759884 1.808920e-04 #> 2 crude.rate          none 7.027737 1.207688 1.458510 5.819166 8.200734e-09 #>        mse model_name model_call #> 1 10.94057        lin         lm #> 2 10.76384        lin         lm #>                                              model_formula policy_speed #> 1 crude.rate ~ state + year + population + treatment_level      instant #> 2 crude.rate ~ state + year + population + treatment_level      instant #>   n_implementation_periods prior_control effect_magnitude n_units #> 1                        1         level         1.265073       2 #> 2                        1         level         1.265073       2 #>   effect_direction n mean_es_prior max_es_prior mean_es_outcome max_es_outcome #> 1              pos 2    -0.3431017    0.4605570     0.006008712      0.7244937 #> 2              pos 2     0.5371144    0.9122695     0.720527604      1.2531078 #>   n_unique_enact_years mu1_prior mu0_prior sd_prior mu1_prior_old mu0_prior_old #> 1                    2  11.83860  12.04238 5.098109      11.83860      12.04238 #> 2                    2  15.79815  11.95144 5.098109      15.79815      11.95144 #>   sd_prior_old      mu1      mu0       sd iter #> 1     5.098109 16.18768 12.60340 6.657585    1 #> 2     5.098109 20.43924 12.52473 6.671433    2 #>"},{"path":"https://randcorporation.github.io/optic/reference/exposure_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies a time-varying treatment effect — exposure_list","title":"Applies a time-varying treatment effect — exposure_list","text":"Simulates time-varying treatment effect starts zero time period zero, linearly increases 'full treatment' effect, based analyst-provided choices concerning time full treatment effect 'speed'","code":""},{"path":"https://randcorporation.github.io/optic/reference/exposure_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies a time-varying treatment effect — exposure_list","text":"","code":"exposure_list(   sampled_time_period,   mo,   available_periods,   policy_speed,   n_implementation_periods )"},{"path":"https://randcorporation.github.io/optic/reference/exposure_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies a time-varying treatment effect — exposure_list","text":"sampled_time_period Year treatment first enacted mo Month treatment first enacted available_periods Maximum number time periods data (e.g. policy 1950-2000, available_periods == 50) policy_speed string either \"instant\" policy going immediate effect \"slow\" policy effect phasing linearly across n_implement_periods n_implementation_periods Number periods full treatment effect applied. used policy_speed 'slow'.","code":""},{"path":"https://randcorporation.github.io/optic/reference/exposure_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies a time-varying treatment effect — exposure_list","text":"list, containing vector policy years implementation, integer starting policy implementation month,          effect treatment within given implementation year (fraction total policy effect)","code":""},{"path":"https://randcorporation.github.io/optic/reference/exposure_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies a time-varying treatment effect — exposure_list","text":"","code":"# Set up a policy that starts in first-year of data, in July and takes  # 2 years for full implementation: exposure_list(1, 7, 3, policy_speed = 'slow', n_implementation_periods = 2) #> $policy_years #> [1] 1 2 3 #>  #> $policy_month #> [1] 7 #>  #> $exposure #> [1] 0.0625000 0.5625000 0.9270833 #>   # Same scenario but effect happens instantaneously: exposure_list(1, 7, 3, policy_speed = 'instant') #> $policy_years #> [1] 1 2 3 #>  #> $policy_month #> [1] 7 #>  #> $exposure #> [1] 0.5 1.0 1.0 #>"},{"path":"https://randcorporation.github.io/optic/reference/model_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a formula object into its left-hand-side and right-hand-side components — model_terms","title":"Parse a formula object into its left-hand-side and right-hand-side components — model_terms","text":"Parse formula object left-hand-side right-hand-side components","code":""},{"path":"https://randcorporation.github.io/optic/reference/model_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a formula object into its left-hand-side and right-hand-side components — model_terms","text":"","code":"model_terms(x)"},{"path":"https://randcorporation.github.io/optic/reference/model_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a formula object into its left-hand-side and right-hand-side components — model_terms","text":"x Formula parse","code":""},{"path":"https://randcorporation.github.io/optic/reference/model_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a formula object into its left-hand-side and right-hand-side components — model_terms","text":"list named elements \"lhs\" \"rhs\", containing variables respective side equation","code":""},{"path":"https://randcorporation.github.io/optic/reference/model_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a formula object into its left-hand-side and right-hand-side components — model_terms","text":"","code":"# Set up a hypothetical function, then decompose into left-hand and  # right-hand sides form <- formula(outcome ~ treatment + confounder + unit + time) model_terms(form) #> $lhs #> [1] \"outcome\" #>  #> $rhs #> [1] \"treatment\"  \"confounder\" \"unit\"       \"time\"       #>"},{"path":"https://randcorporation.github.io/optic/reference/optic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Optic Model — optic_model","title":"Optic Model — optic_model","text":"Generates model object apply simulated dataset","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optic Model — optic_model","text":"","code":"optic_model(name, type, call, formula, se_adjust, ...)"},{"path":"https://randcorporation.github.io/optic/reference/optic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optic Model — optic_model","text":"name Name model object, used identify model reviewing simulation results type Estimator used identify treatment effect using simulated data. Specified string, can either 'reg' (regression), 'autoreg' (autoregression, adds lag outcome variable regression model), 'drdid' (doubly-robust difference--difference estimator), 'multisynth' (augmented synthetic control) call String specifies R function call applying estimator. Package currently supports  either 'lm' (linear model), 'feols' (fixed-effect OLS), 'multisynth' (pooled synthetic controls), 'glm.nb' (negative-binomial generalized nearlized linear model) formula Model specification, using R formula formatting. Must include variable labeled 'treatment' 'nonconf' & 'selbias' simulation method variables labeled 'treatment1' & 'treatment2' simulation method 'concurrent' se_adjust Adjustments applied standard errors following model estimation. Specified string, OPTIC currently support 'none' adjustment 'cluster' clustered standard errors. Clustered standard errors use 'unit_var' specified optic_simulation determining unit used clustering standard errors. ... Additional arguments passed model call. Please refer documentation model call additional details. model call expects name, may need pass parameter using param = .name(\"variable_name\") opposed param = variable_name.","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optic Model — optic_model","text":"optic_model optic_model object used input within optic_simulations. Details model calls parameters.","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optic Model — optic_model","text":"","code":"# Set up a simple linear model form <- formula(crude.rate ~ state + year + population + treatment_level) mod <- optic_model(name = 'lin',                     type = 'reg',                     call = 'lm',                     formula = form,                     se_adjust = 'none')  # Deploy an auto-regressive model. # type = \"autoreg\" will make AR term  # automatically when the model is deployed; also note # in formula the use of \"treatment_change\" as the treatment variable  # rather than \"treatment_level\" like in the previous example:  form_ar <- formula(crude.rate ~ state + year + population + treatment_change) mod_ar <- optic_model(name = \"auto_regressive_linear\",                        type = \"autoreg\",                        call = \"lm\",                        formula = form_ar,                       se_adjust = \"none\")  # One could also use a different call, assuming the right packages  # are installed and the model uses a familiar formula framework.  # Example with random intercept for states, using lme4 package.  form_me <- formula(crude.rate ~                     population + year + treatment_level + (1|state))                     mod_me <- optic_model(name = \"mixed_effect\",                        type = \"reg\",                        call = \"lmer\",                        formula = form_me,                        se_adjust = \"none\")"},{"path":"https://randcorporation.github.io/optic/reference/optic_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a configuration object used to run simulations — optic_simulation","title":"Create a configuration object used to run simulations — optic_simulation","text":"Performs validation inputs produces configuration object     contains required parameters dispatch simulation runs empirical data     provided.","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a configuration object used to run simulations — optic_simulation","text":"","code":"optic_simulation(   x,   models,   iters,   unit_var,   time_var,   conf_var,   effect_magnitude,   n_units,   effect_direction,   policy_speed,   prior_control = \"level\",   bias_size = NULL,   bias_type = NULL,   treat_var = NULL,   n_implementation_periods,   rhos = NULL,   years_apart = NULL,   ordered = NULL,   method,   method_sample,   method_model,   method_results,   method_pre_model,   method_post_model,   globals = NULL,   verbose = TRUE )"},{"path":"https://randcorporation.github.io/optic/reference/optic_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a configuration object used to run simulations — optic_simulation","text":"x Empirical data used simulate synthetic datasets specified treatment effect. models List `optic_model` objects run iteration simulation scenario. elements must created using `optic_model` function. iters numeric, specifying number iterations simulation scenario. unit_var string variable, used determine clusters clustered standard errors. time_var string variable, specifying time units (e.g. \"year\", \"time treat\", etc). Must specified terms years (fractional years accepted). conf_var unobserved confounding variable. used 'confound-method'. effect_magnitude vector numerics, specifying 'true' effect sizes treatment scenarios. See vignette details. Synthetic datasets generated entry vector. n_units numeric, determining number units simulate treatment effects. Synthetic datasets generated entry vector. effect_direction vector containing either 'neg', 'null', 'pos'. Determines direction simulated effect. Synthetic datasets generated entry vector. policy_speed vector strings, containing either 'instant' 'slow' entries, determining quickly treated units obtain simulated effect. Synthetic datasets generated entry vector. Can either 'instant\" (treatment effect applies fully first treated time period) 'slow' (treatment effect ramps linearly desired effect size, based `n_implementation_periods`. prior_control used confounding method. Adds additional set variables control outcome previous periods (either moving average previous time periods autoregressive term) bias_size string, either \"small\" \"medium\" \"large\". Specifies relative size bias 'confounding' method. bias_type string, either linear\" \"nonlinear\". Specifies type bias 'confounding' method treat_var string variable, referring unit--analysis treatment (may unit var argument, e.g. treated classrooms within clustered schools) n_implementation_periods vector numerics, determining number periods implementation treated units reach desired simulated treatment effect. Synthetic datasets generated entry vector. rhos vector values 0-1, indicating correlation primary policy concurrent policy. applies 'method' == 'concurrent'. Synthetic datasets generated entry vector. years_apart numeric, number years primary policy implemented concurrent policy. applies 'method' == 'concurrent'. ordered boolean, determines primary policy always occurs concurrent policy (`TRUE`) policies randomly ordered (`FALSE`). method string, determing simulation method. Can either 'no_confounding', 'confounding' 'concurrent' method_sample Underlying function sampling method determine treatment status. Provided convenience user need modify actual underlying function's script. method_model Another convenience function, can modified control model call. method_results Another convenience function, can modified control simulation results returned. method_pre_model Similar method_sample argument, variable provided convenience user. function transforms treatment effect, simulated within synthetic data. method_post_model Another convenience function, can modified control transformations simulated effect, modeling. globals Additional globals pass simulate function, parallelization packages additional R packages used method calls (e.g. modeling packages, like \"FEOLS\"). verbose Boolean, default True. TRUE, provides summary details simulation runs across iterations","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a configuration object used to run simulations — optic_simulation","text":"OpticSim object, contains simulation model parameters simulation runs, used input dispatch_simulations.","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_simulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a configuration object used to run simulations — optic_simulation","text":"resulting configuration object used pass simulation scenarios 'simulate' function. Provided convenience function user          can investigate simulation arguments prior running models.","code":""},{"path":"https://randcorporation.github.io/optic/reference/optic_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a configuration object used to run simulations — optic_simulation","text":"","code":"# Load data for simulation and set up a hypothetical policy effect:   data(overdoses) eff <- 0.1*mean(overdoses$crude.rate, na.rm = TRUE)  # Set up a simple linear model form <- formula(crude.rate ~ state + year + population + treatment_level) mod <- optic_model(name = 'lin',                     type = 'reg',                     call = 'lm',                     formula = form,                     se_adjust = 'none')  # Create simulation object, with desired parameters for simulations: sim <- optic_simulation(x = overdoses,                          models = list(mod),                          method = 'no_confounding',                          unit_var = 'state',                          treat_var = 'state',                         time_var = 'year',                          effect_magnitude = list(eff),                          n_units = 10,                          effect_direction = 'pos',                          iters = 10,                         policy_speed = 'instant',                          n_implementation_periods = 1) #> Number of Simulations: 1 #> Number of Models: 1 #> Iteration per Simulation : 10 #> Total number of Iterations to Run: 10"},{"path":"https://randcorporation.github.io/optic/reference/overdoses.html","id":null,"dir":"Reference","previous_headings":"","what":"OPTIC Overdoses example data. — overdoses","title":"OPTIC Overdoses example data. — overdoses","text":"example dataset performing simulations using OPTIC library, consisting state-year overdose data US Bureau Labor Statistics,  Centers Disease Control Prevention, IQVIA Xponent.","code":""},{"path":"https://randcorporation.github.io/optic/reference/overdoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OPTIC Overdoses example data. — overdoses","text":"","code":"overdoses"},{"path":"https://randcorporation.github.io/optic/reference/overdoses.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OPTIC Overdoses example data. — overdoses","text":"data frame 969 rows 7 variables: state US state year Year population Population estimate (Centers Disease Control Prevention, National Center Health Statistics) unemploymentrate Average annual unemployment rate (US Bureau Labor Statistics) opioid_rx Estimated number annual opioid prescriptions dispensed per 100 residents (Centers Disease Control Prevention, IQVIA) deaths Annual number drug-induced deaths (drug overdose) (Centers Disease Control Prevention, National Center Health Statistics) crude.rate Crude rate drug-induced deaths (drug overdose) per 100,000 residents (Centers Disease Control Prevention, National Center Health Statistics)","code":""},{"path":"https://randcorporation.github.io/optic/reference/overdoses.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"OPTIC Overdoses example data. — overdoses","text":"US Bureau Labor Statistics. Local Area Unemployment Statistics April 2019 release. Accessed https://www.bls.gov/lau/. Centers Disease Control Prevention, National Center Health Statistics. Multiple Cause Death 1999-2019 CDC WONDER Online Database, released 2020. Data Multiple Cause Death Files, 1999-2019, compiled data provided 57 vital statistics jurisdictions Vital Statistics Cooperative Program. Accessed http://wonder.cdc.gov/mcd-icd10.html. Centers Disease Control Prevention, IQVIA Xponent 2006–2019. U.S. Opioid Dispensing Rate Maps. Accessed https://www.cdc.gov/drugoverdose/rxrate-maps/index.html.","code":""},{"path":"https://randcorporation.github.io/optic/news/index.html","id":"optic-100","dir":"Changelog","previous_headings":"","what":"optic 1.0.0","title":"optic 1.0.0","text":"CRAN release: 2023-05-26 First package release.","code":""}]
